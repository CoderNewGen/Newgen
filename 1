// helpers.js
export const textMatch = (text) => (content, element) => {
  const hasText = (node) => node.textContent === text || node.textContent.includes(text);
  const childrenDontHaveText = Array.from(element?.children || []).every(child => !hasText(child));
  return hasText(element) && childrenDontHaveText;
};

import React from 'react';
import { render, screen, fireEvent, act } from '@testing-library/react';
import TimeoutPopup from './TimeoutPopup';
import '@testing-library/jest-dom/extend-expect';
import { textMatch } from './helpers'; // Importing the helper

jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key) => key,
  }),
}));

describe('TimeoutPopup Component', () => {
  const mockStaySignedinHandler = jest.fn();
  const mockSignoutHandler = jest.fn();

  const defaultProps = {
    show: true,
    millisecondsTillSignout: 120000, // 2 minutes
    staySignedinHandler: mockStaySignedinHandler,
    signoutHandler: mockSignoutHandler,
    staySignedInButtonText: 'Stay Signed In',
    signoutButtonText: 'Sign Out',
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders correctly when shown', () => {
    render(<TimeoutPopup {...defaultProps} />);
    expect(screen.getByText(textMatch('YOURE_ABOUT_TO_BE_SIGNED_OUT'))).toBeInTheDocument();
    expect(screen.getByText(textMatch('FOR_YOUR_SECURITY_WE_WILL_SIGN_YOU_OUT'))).toBeInTheDocument();
    expect(screen.getByText(textMatch('Stay Signed In'))).toBeInTheDocument();
    expect(screen.getByText(textMatch('Sign Out'))).toBeInTheDocument();
  });

  it('renders children when provided', () => {
    render(<TimeoutPopup {...defaultProps}>Test Children</TimeoutPopup>);
    expect(screen.getByText(textMatch('Test Children'))).toBeInTheDocument();
  });

  it('calls staySignedinHandler when "Stay Signed In" button is clicked', () => {
    render(<TimeoutPopup {...defaultProps} />);
    fireEvent.click(screen.getByText(textMatch('Stay Signed In')));
    expect(mockStaySignedinHandler).toHaveBeenCalled();
  });

  it('calls signoutHandler when "Sign Out" button is clicked', () => {
    render(<TimeoutPopup {...defaultProps} />);
    fireEvent.click(screen.getByText(textMatch('Sign Out')));
    expect(mockSignoutHandler).toHaveBeenCalled();
  });

  it('starts countdown after a delay and updates screen reader text', () => {
    jest.useFakeTimers();

    render(<TimeoutPopup {...defaultProps} />);

    act(() => {
      jest.advanceTimersByTime(defaultProps.millisecondsTillSignout - 60000);
    });

    expect(screen.getByText(textMatch('1_MINUTE'))).toBeInTheDocument();

    act(() => {
      jest.advanceTimersByTime(1000);
    });
    expect(screen.getByText(textMatch('59 SECONDS'))).toBeInTheDocument();

    jest.useRealTimers();
  });

  it('signs out automatically when timeRemaining reaches 0', () => {
    jest.useFakeTimers();

    render(<TimeoutPopup {...defaultProps} />);

    act(() => {
      jest.advanceTimersByTime(defaultProps.millisecondsTillSignout - 60000);
    });

    act(() => {
      jest.advanceTimersByTime(60000);
    });

    expect(mockSignoutHandler).toHaveBeenCalled();
    jest.useRealTimers();
  });

  it('resets state when "show" is false', () => {
    const { rerender } = render(<TimeoutPopup {...defaultProps} show={true} />);

    act(() => {
      jest.advanceTimersByTime(defaultProps.millisecondsTillSignout - 60000);
    });

    expect(screen.getByText(textMatch('1_MINUTE'))).toBeInTheDocument();

    rerender(<TimeoutPopup {...defaultProps} show={false} />);
    
    expect(screen.queryByText(textMatch('1_MINUTE'))).not.toBeInTheDocument();
  });

  it('handles Escape key to stay signed in', () => {
    render(<TimeoutPopup {...defaultProps} show={true} />);
    
    fireEvent.keyDown(window, { key: 'Escape', code: 'Escape' });
    expect(mockStaySignedinHandler).toHaveBeenCalled();
  });
});
