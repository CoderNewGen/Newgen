import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import TimeoutPopup from './TimeoutPopup';
import Modal from '../../BaseComponents/Modal/Modal';

// Mock i18n translation
jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key) => key,
  }),
}));

describe('TimeoutPopup', () => {
  const defaultProps = {
    show: true,
    millisecondsTillSignout: 120000, // 2 minutes in milliseconds
    staySignedinHandler: jest.fn(),
    signoutHandler: jest.fn(),
    staySignedInButtonText: 'Stay Signed In',
    signoutButtonText: 'Sign Out',
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders the component when show is true', () => {
    render(<TimeoutPopup {...defaultProps} />);

    expect(screen.getByText('YOURE_ABOUT_TO_BE_SIGNED_OUT')).toBeInTheDocument();
    expect(screen.getByText('Stay Signed In')).toBeInTheDocument();
    expect(screen.getByText('Sign Out')).toBeInTheDocument();
  });

  it('does not render the component when show is false', () => {
    render(<TimeoutPopup {...defaultProps} show={false} />);
    expect(screen.queryByText('YOURE_ABOUT_TO_BE_SIGNED_OUT')).not.toBeInTheDocument();
  });

  it('calls staySignedinHandler on Stay Signed In button click', () => {
    render(<TimeoutPopup {...defaultProps} />);

    fireEvent.click(screen.getByText('Stay Signed In'));
    expect(defaultProps.staySignedinHandler).toHaveBeenCalled();
  });

  it('calls signoutHandler on Sign Out button click', () => {
    render(<TimeoutPopup {...defaultProps} />);

    fireEvent.click(screen.getByText('Sign Out'));
    expect(defaultProps.signoutHandler).toHaveBeenCalled();
  });

  it('starts countdown when show is true and millisecondsTillSignout has elapsed', async () => {
    jest.useFakeTimers();
    render(<TimeoutPopup {...defaultProps} />);

    expect(screen.getByText('2_MINUTES.')).toBeInTheDocument();

    jest.advanceTimersByTime(60000); // 1 minute to start countdown
    await waitFor(() => expect(screen.getByText('1_MINUTE.')).toBeInTheDocument());

    jest.useRealTimers();
  });

  it('updates countdown display text every second after countdown starts', async () => {
    jest.useFakeTimers();
    render(<TimeoutPopup {...defaultProps} />);

    jest.advanceTimersByTime(60000); // Start countdown after 1 minute
    await waitFor(() => expect(screen.getByText('1_MINUTE.')).toBeInTheDocument());

    jest.advanceTimersByTime(1000); // 1 second
    expect(screen.getByText('59 SECONDS.')).toBeInTheDocument();

    jest.advanceTimersByTime(1000); // Another second
    expect(screen.getByText('58 SECONDS.')).toBeInTheDocument();

    jest.useRealTimers();
  });

  it('triggers signoutHandler when countdown reaches 0', async () => {
    jest.useFakeTimers();
    render(<TimeoutPopup {...defaultProps} />);

    jest.advanceTimersByTime(60000); // Start countdown
    jest.advanceTimersByTime(60000); // Complete countdown to 0

    await waitFor(() => expect(defaultProps.signoutHandler).toHaveBeenCalled());
    jest.useRealTimers();
  });

  it('handles keyboard events for staySignedinHandler when Escape is pressed', () => {
    render(<TimeoutPopup {...defaultProps} />);

    fireEvent.keyDown(window, { key: 'Escape' });
    expect(defaultProps.staySignedinHandler).toHaveBeenCalled();
  });

  it('does not start countdown if show is set to false after initial load', () => {
    const { rerender } = render(<TimeoutPopup {...defaultProps} show={false} />);

    rerender(<TimeoutPopup {...defaultProps} show={true} />);
    jest.advanceTimersByTime(60000); // Wait time for countdown start

    expect(screen.queryByText('1_MINUTE.')).toBeInTheDocument();
  });
});
