import React from 'react';
import { render, fireEvent, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import TimeoutPopup from './TimeoutPopup'; // Ensure this path is correct

describe('TimeoutPopup Component', () => {
  const defaultProps = {
    show: true,
    millisecondsTillSignout: 120000,
    staySignedinHandler: jest.fn(),
    signoutHandler: jest.fn(),
    staySignedInButtonText: 'Stay Signed In',
    signoutButtonText: 'Sign Out',
    children: null as React.ReactNode,
  };

  it('renders without crashing', () => {
    render(<TimeoutPopup {...defaultProps} />);
  });

  it('displays the correct initial message when show is true', () => {
    render(<TimeoutPopup {...defaultProps} />);
    expect(screen.getByText(/you're about to be signed out/i)).toBeInTheDocument();
    expect(screen.getByText(/for your security, we will sign you out in 2 minutes\./i)).toBeInTheDocument();
  });

  it('calls staySignedinHandler when the Stay Signed In button is clicked', () => {
    render(<TimeoutPopup {...defaultProps} />);
    fireEvent.click(screen.getByText('Stay Signed In'));
    expect(defaultProps.staySignedinHandler).toHaveBeenCalled();
  });

  it('calls signoutHandler when the Sign Out link is clicked', () => {
    render(<TimeoutPopup {...defaultProps} />);
    fireEvent.click(screen.getByText('Sign Out'));
    expect(defaultProps.signoutHandler).toHaveBeenCalled();
  });

  it('starts countdown when show is true', async () => {
    jest.useFakeTimers();
    render(<TimeoutPopup {...defaultProps} />);
    
    await waitFor(() => {
      jest.advanceTimersByTime(60000); // Simulate 1 minute passing
      expect(screen.getByText('1 minute.')).toBeInTheDocument();
    });

    jest.useRealTimers();
  });

  it('displays the correct remaining time during countdown', async () => {
    jest.useFakeTimers();
    render(<TimeoutPopup {...defaultProps} />);
    
    await waitFor(() => {
      jest.advanceTimersByTime(61000); // Simulate 61 seconds passing
      expect(screen.getByText('59 seconds.')).toBeInTheDocument();
    });

    jest.useRealTimers();
  });

  it('executes signoutHandler when time runs out', async () => {
    jest.useFakeTimers();
    render(<TimeoutPopup {...defaultProps} />);
    
    await waitFor(() => {
      jest.advanceTimersByTime(120000); // Simulate 2 minutes passing
      expect(defaultProps.signoutHandler).toHaveBeenCalled();
    });

    jest.useRealTimers();
  });
});
