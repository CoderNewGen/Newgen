import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import AppealsAndPenaltiesLanding from './AppealsAndPenaltiesLanding'; // Adjust the import based on your file structure
import { useTranslation } from 'react-i18next'; // Assuming you are using react-i18next for translations

jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key) => key, // Mock translation function
  }),
}));

describe('AppealsAndPenaltiesLanding', () => {
  const createCaseMock = jest.fn();
  
  const renderComponent = (dashboardData = [], isLogout = false) => {
    render(<AppealsAndPenaltiesLanding createCase={createCaseMock} dashboardData={dashboardData} isLogout={isLogout} />);
  };

  test('renders the main heading', () => {
    renderComponent();
    expect(screen.getByRole('heading', { level: 1 })).toHaveTextContent('YOUR_SELF_ASSESMENT_PENALTIES');
  });

  test('displays no penalties message when dashboardData is empty', () => {
    renderComponent();
    expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
  });

  test('handles null dashboardData gracefully', () => {
    renderComponent(null);
    expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
  });

  test('handles undefined dashboardData gracefully', () => {
    renderComponent(undefined);
    expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
  });

  test('renders penalties section when dashboardData is populated', () => {
    const dashboardDataWithPenalties = [{ id: 1, type: 'LFP' }];
    renderComponent(dashboardDataWithPenalties);
    
    expect(screen.getByText('YOU_CAN_ALSO_TELL_US')).toBeInTheDocument();
    expect(screen.getByText('IF_YOU_HAVE_MORE_THAN_ONE')).toBeInTheDocument();
    expect(screen.getByText('THERE_ARE_2_TYPES')).toBeInTheDocument();
    expect(screen.getByText('LFP')).toBeInTheDocument();
    expect(screen.getByText('LPP')).toBeInTheDocument();
    expect(screen.getByText('APPEAL_MULTIPLE_PENALTIES')).toBeInTheDocument();
    expect(screen.getByText('IF_YOU_HAVE_MORE_THAN_ONE_ACROSS_MULTIPLE_TAX_YEARS')).toBeInTheDocument();
  });

  test('handles empty penalty types gracefully', () => {
    const dashboardDataWithEmptyPenaltyTypes = [{ id: 1, type: '' }, { id: 2, type: null }];
    renderComponent(dashboardDataWithEmptyPenaltyTypes);
    
    expect(screen.getByText('YOU_CAN_ALSO_TELL_US')).toBeInTheDocument();
    expect(screen.getByText('IF_YOU_HAVE_MORE_THAN_ONE')).toBeInTheDocument();
    expect(screen.getByText('THERE_ARE_2_TYPES')).toBeInTheDocument();
    // Check if no empty penalty types are rendered
    expect(screen.queryByText('')).not.toBeInTheDocument();
  });

  test('renders multiple penalties correctly', () => {
    const dashboardDataWithMultiplePenalties = [
      { id: 1, type: 'LFP' },
      { id: 2, type: 'LPP' },
    ];
    renderComponent(dashboardDataWithMultiplePenalties);
    
    expect(screen.getByText('LFP')).toBeInTheDocument();
    expect(screen.getByText('LPP')).toBeInTheDocument();
  });

  test('handles large datasets without crashing', () => {
    const largeDashboardData = Array.from({ length: 100 }, (_, index) => ({ id: index, type: index % 2 === 0 ? 'LFP' : 'LPP' }));
    renderComponent(largeDashboardData);
    
    expect(screen.getByText('LFP')).toBeInTheDocument();
    expect(screen.getByText('LPP')).toBeInTheDocument();
  });

  test('calls createCase function when button is clicked', () => {
    renderComponent([{ id: 1, type: 'LFP' }]);
    const button = screen.getByRole('button', { name: 'START_NOW' });
    fireEvent.click(button);
    
    expect(createCaseMock).toHaveBeenCalledTimes(1);
  });

  test('renders link to report a technical problem', () => {
    renderComponent();
    const link = screen.getByRole('link', { name: /PAGE_NOT_WORKING_PROPERLY OPENS_IN_NEW_TAB/i });
    expect(link).toHaveAttribute('href', expect.stringContaining('contact/report-technical-problem'));
    expect(link).toHaveAttribute('target', '_blank');
    expect(link).toHaveAttribute('rel', 'noreferrer noopener');
  });

  test('renders the button correctly', () => {
    renderComponent([{ id: 1, type: 'LFP' }]);
    const button = screen.getByRole('button', { name: 'START_NOW' });
    expect(button).toBeInTheDocument();
    expect(button).toHaveAttribute('data-prevent-double-click', 'true');
  });

  test('hides main content when isLogout is true', () => {
    renderComponent([], true);
    expect(screen.getByRole('main')).toHaveClass('visibility-hidden');
  });

  test('shows main content when isLogout is false', () => {
    renderComponent([], false);
    expect(screen.getByRole('main')).not.toHaveClass('visibility-hidden');
  });

  // Additional tests can be added here to cover more scenarios
});
