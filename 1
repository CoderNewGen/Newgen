import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import AppealsAndPenaltiesLanding from './AppealsAndPenaltiesLanding';
import { useTranslation } from 'react-i18next';
import useHMRCExternalLinks from '../../../components/helpers/hooks/HMRCExternalLinks';
import { PenaltyDuration } from './PenaltyTypes';

// Mock dependencies
jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string) => key,
  }),
}));

jest.mock('../../../components/helpers/hooks/HMRCExternalLinks', () => ({
  default: jest.fn(() => ({ hmrcURL: 'https://www.hmrc.gov.uk/' })),
}));

const mockPenaltyData: Array<PenaltyDuration> = [
  {
    duration: '2022-2023',
    penalties: [
      {
        penaltyType: 'Late Filing',
        results: [
          { PenaltyNumber: 1, AdditionalInfo: 'Missed deadline by 5 days', Amount: 100 },
        ],
        totalAmount: 100,
      },
    ],
  },
];

const defaultProps = {
  isLogout: false,
  pConn: {
    getContextName: jest.fn().mockReturnValue('mockContext'),
  },
  penaltyDataEndpoint: '/mock/penalty-data-endpoint',
  creatCaseEndpoint: '/mock/create-case-endpoint',
  handleCaseStart: jest.fn(),
};

describe('AppealsAndPenaltiesLanding Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders correctly with default props', () => {
    render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    expect(screen.getByRole('main')).toBeInTheDocument();
    expect(screen.getByText('YOUR_SELF_ASSESMENT_PENALTIES')).toBeInTheDocument();
  });

  test('renders "no penalties" message when dashboardData is empty', async () => {
    const mockFetch = jest
      .spyOn(global, 'fetch')
      .mockResolvedValueOnce({ json: () => Promise.resolve([]) });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
    });

    mockFetch.mockRestore();
  });

  test('renders penalties section when dashboardData is available', async () => {
    const mockFetch = jest
      .spyOn(global, 'fetch')
      .mockResolvedValueOnce({ json: () => Promise.resolve(mockPenaltyData) });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_CAN_MAKE_AN_APPEAL')).toBeInTheDocument();
      expect(screen.getByText('Late Filing')).toBeInTheDocument();
      expect(screen.getByText('Missed deadline by 5 days')).toBeInTheDocument();
    });

    mockFetch.mockRestore();
  });

  test('handles createCase button click', async () => {
    const mockCreateCase = jest.spyOn(PCore.getMashupApi(), 'createCase');
    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    const startNowButton = screen.getByText('START_NOW');
    fireEvent.click(startNowButton);

    expect(mockCreateCase).toHaveBeenCalledWith(
      defaultProps.creatCaseEndpoint,
      PCore.getConstants().APP.APP
    );
    expect(defaultProps.handleCaseStart).toHaveBeenCalled();
  });

  test('renders logout state correctly', () => {
    render(<AppealsAndPenaltiesLanding {...defaultProps} isLogout={true} />);
    expect(screen.getByRole('main')).toHaveClass('visibility-hidden');
  });

  test('renders "Page not working properly" link with correct URL', () => {
    render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    const technicalProblemLink = screen.getByText('PAGE_NOT_WORKING_PROPERLY');
    expect(technicalProblemLink).toHaveAttribute(
      'href',
      'https://www.hmrc.gov.uk/contact/report-technical-problem?service=427&referrerUrl=' +
        window.location
    );
  });
});

describe('Edge Cases for AppealsAndPenaltiesLanding', () => {
  test('handles API error gracefully when fetching penalties data', async () => {
    const mockFetch = jest.spyOn(global, 'fetch').mockRejectedValueOnce(new Error('API error'));

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOUR_SELF_ASSESMENT_PENALTIES')).toBeInTheDocument();
      // Dashboard should not render penalties section
      expect(screen.queryByText('YOU_CAN_MAKE_AN_APPEAL')).not.toBeInTheDocument();
    });

    mockFetch.mockRestore();
  });

  test('handles empty penaltyData gracefully', async () => {
    const mockFetch = jest
      .spyOn(global, 'fetch')
      .mockResolvedValueOnce({ json: () => Promise.resolve([]) });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
    });

    mockFetch.mockRestore();
  });

  test('handles penalties with missing fields gracefully', async () => {
    const incompletePenaltyData = [
      {
        duration: '2022-2023',
        penalties: [
          {
            penaltyType: null,
            results: [{ PenaltyNumber: null, AdditionalInfo: null, Amount: null }],
          },
        ],
      },
    ];

    const mockFetch = jest
      .spyOn(global, 'fetch')
      .mockResolvedValueOnce({ json: () => Promise.resolve(incompletePenaltyData) });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOUR_SELF_ASSESMENT_PENALTIES')).toBeInTheDocument();
      expect(screen.queryByText('null')).not.toBeInTheDocument();
    });

    mockFetch.mockRestore();
  });

  test('renders correctly when penaltyData is undefined', async () => {
    const mockFetch = jest.spyOn(global, 'fetch').mockResolvedValueOnce({ json: () => undefined });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
    });

    mockFetch.mockRestore();
  });
});
