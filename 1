import checkAuthAndRedirectIfTens from './checkAuthAndRedirectIfTens';
import getPageDataAsync from './getPageDataAsync';

jest.mock('./getPageDataAsync');

const TENS_REDIRECT_URL = 'https://www.tax.service.gov.uk/protect-tax-info';

describe('checkAuthAndRedirectIfTens', () => {
  afterEach(() => {
    jest.resetAllMocks();
    localStorage.clear();
    delete (window as any).location;
    (window as any).location = { href: '', replace: jest.fn() };
  });

  it('should not do anything if tensCheckCarriedOut is true in localStorage', async () => {
    localStorage.setItem('tensCheckCarriedOut', 'true');

    await checkAuthAndRedirectIfTens();

    expect(localStorage.getItem('tensCheckCarriedOut')).toBe(null); // Should remove the key
    expect(getPageDataAsync).not.toHaveBeenCalled();
    expect(window.location.replace).not.toHaveBeenCalled();
  });

  it('should redirect to TENS URL if PostAuthAction is "TENS" and IsNormalAuthentication is false', async () => {
    const mockCurrentPage = 'https://example.com/current';
    window.location.href = mockCurrentPage;

    (getPageDataAsync as jest.Mock).mockResolvedValue({
      IsNormalAuthentication: false,
      PostAuthAction: 'TENS'
    });

    await checkAuthAndRedirectIfTens();

    expect(localStorage.getItem('tensCheckCarriedOut')).toBe('true');
    expect(window.location.replace).toHaveBeenCalledWith(
      `${TENS_REDIRECT_URL}?redirectUrl=${encodeURIComponent(mockCurrentPage)}`
    );
  });

  it('should not redirect if PostAuthAction is not "TENS"', async () => {
    (getPageDataAsync as jest.Mock).mockResolvedValue({
      IsNormalAuthentication: false,
      PostAuthAction: 'OTHER_ACTION'
    });

    await checkAuthAndRedirectIfTens();

    expect(localStorage.getItem('tensCheckCarriedOut')).toBe(null);
    expect(window.location.replace).not.toHaveBeenCalled();
  });

  it('should not redirect if IsNormalAuthentication is true', async () => {
    (getPageDataAsync as jest.Mock).mockResolvedValue({
      IsNormalAuthentication: true,
      PostAuthAction: 'TENS'
    });

    await checkAuthAndRedirectIfTens();

    expect(localStorage.getItem('tensCheckCarriedOut')).toBe(null);
    expect(window.location.replace).not.toHaveBeenCalled();
  });

  it('should handle null response from getPageDataAsync gracefully', async () => {
    (getPageDataAsync as jest.Mock).mockResolvedValue(null);

    await checkAuthAndRedirectIfTens();

    expect(localStorage.getItem('tensCheckCarriedOut')).toBe(null);
    expect(window.location.replace).not.toHaveBeenCalled();
  });
});

import getPageDataAsync from './getPageDataAsync';

describe('getPageDataAsync', () => {
  const mockGetPageDataAsync = jest.fn();
  const PCoreMock = {
    getDataPageUtils: () => ({
      getPageDataAsync: mockGetPageDataAsync
    })
  };

  beforeEach(() => {
    (global as any).PCore = PCoreMock;
  });

  afterEach(() => {
    jest.resetAllMocks();
    delete (global as any).PCore;
  });

  it('should call PCore.getDataPageUtils().getPageDataAsync with correct parameters', async () => {
    mockGetPageDataAsync.mockResolvedValue({ someKey: 'someValue' });

    const result = await getPageDataAsync({
      pageName: 'testPage',
      context: 'testContext',
      props: { key: 'value' }
    });

    expect(mockGetPageDataAsync).toHaveBeenCalledWith('testPage', 'testContext', { key: 'value' });
    expect(result).toEqual({ someKey: 'someValue' });
  });

  it('should return null if an error occurs', async () => {
    mockGetPageDataAsync.mockRejectedValue(new Error('Test Error'));

    const result = await getPageDataAsync({
      pageName: 'testPage'
    });

    expect(result).toBeNull();
  });
});
