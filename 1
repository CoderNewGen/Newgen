import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import AppealsAndPenalties from './AppealsAndPenalties';
import { AppContext } from '../../reuseables/AppContext'; // Adjust the import according to your context location
import { useTranslation } from 'react-i18next';

// Mocking useTranslation hook
jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key) => key,
  }),
}));

// Mocking the context value
const mockContextValue = {
  showLanguageToggle: true,
};

describe('AppealsAndPenalties Component', () => {
  test('renders without crashing', () => {
    render(
      <AppContext.Provider value={mockContextValue}>
        <AppealsAndPenalties journeyName="testJourney" />
      </AppContext.Provider>
    );

    // Check if the header is rendered
    expect(screen.getByText('APPEAL_A_SELF_ASSESSMENT_PENALTY')).toBeInTheDocument();
  });

  test('displays the landing page initially', () => {
    render(
      <AppContext.Provider value={mockContextValue}>
        <AppealsAndPenalties journeyName="testJourney" />
      </AppContext.Provider>
    );

    // Check if the landing page is displayed
    expect(screen.getByText('Landing Page Content')).toBeInTheDocument(); // Replace with actual text
  });

  test('handles sign out modal display', () => {
    render(
      <AppContext.Provider value={mockContextValue}>
        <AppealsAndPenalties journeyName="testJourney" />
      </AppContext.Provider>
    );

    // Simulate sign out action
    fireEvent.click(screen.getByText('Sign Out')); // Adjust according to your button text
    expect(screen.getByText('Are you sure you want to sign out?')).toBeInTheDocument(); // Adjust with actual modal text
  });

  test('handles case start action', () => {
    render(
      <AppContext.Provider value={mockContextValue}>
        <AppealsAndPenalties journeyName="testJourney" />
      </AppContext.Provider>
    );

    // Simulate case start action
    fireEvent.click(screen.getByText('Start Case')); // Adjust according to your button text
    expect(screen.getByText('Pega Page Content')).toBeInTheDocument(); // Replace with actual text
  });

  // Additional tests can be added here to cover more functionality
});
