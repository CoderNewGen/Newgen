High-Level Design (HLD) Document for PenaltyDetails React Component


---

1. Introduction

The PenaltyDetails React component is a reusable, modular component designed to display a detailed breakdown of penalties for various tax years. It is composed of several sub-components, each responsible for rendering specific segments of data. The structure ensures clarity, reusability, and scalability while adhering to React and TypeScript best practices.


---

2. Objectives

Render hierarchical penalty data categorized by tax year, penalty type, and penalty details.

Utilize sub-components to ensure modularity and separation of concerns.

Provide a user-friendly interface that complies with GOV.UK design standards.



---

3. Architectural Overview

The component consists of the following key layers:

1. Data Input: Hierarchical penalty data passed as props.


2. Rendering Logic:

DurationHeading: Displays the tax year header.

PenaltyCard: Displays grouped penalty data for a specific penalty type.

PenaltyRow: Displays individual penalty details.



3. Helper Functions: Utility functions like formatOrdinal are used to enhance data presentation.



The following subsections detail the component's architecture.


---

4. Components Design

4.1. PenaltyDetails

Description: The parent component responsible for rendering the penalty data for all tax years.

Props:

data: PenaltyData

penaltyData: Array of tax-year penalty data.



Responsibilities:

Iterate through penaltyData and render tax-year-specific penalties using sub-components.




---

4.2. DurationHeading

Description: Displays a heading for each tax year.

Props:

duration: string (e.g., "2023/24").


Responsibilities:

Render the header text with proper GOV.UK styling.




---

4.3. PenaltyCard

Description: Displays penalties grouped by penalty type within a tax year.

Props:

penaltyType: string (e.g., "Late Submission").

results: Array<PenaltyRowProps>: Individual penalty details.

totalAmount: number: Total penalty amount for the type.


Responsibilities:

Render penalty details as a list of PenaltyRow components.

Display total amount if multiple penalties exist for the penalty type.




---

4.4. PenaltyRow

Description: Displays individual penalty details.

Props:

penaltyNumber: number (e.g., 1, 2).

additionalInfo: string (e.g., "Missed submission deadline").

amount: number (e.g., 100.0).


Responsibilities:

Format and display penalty number and additional details.

Render the penalty amount in GBP (£).




---

5. Helper Functions

5.1. formatOrdinal

Purpose: Converts a number to its ordinal representation (e.g., 1 → 1st, 2 → 2nd).

Logic:

Determines the suffix based on the number's value and rules.

Handles edge cases for numbers ending in 11-13.




---

6. Data Model

The data model is defined using TypeScript interfaces for strong type-checking.

interface PenaltyRowProps {
  penaltyNumber: number;
  additionalInfo: string;
  amount: number;
}

interface PenaltySection {
  penaltyType: string;
  results: Array<PenaltyRowProps>;
  totalAmount: number;
}

interface PenaltyDuration {
  duration: string;
  penalties: Array<PenaltySection>;
}

interface PenaltyData {
  penaltyData: Array<PenaltyDuration>;
}


---

7. Styling

The components utilize the following GOV.UK styles:

Headers: govuk-heading-m for tax year headings.

Cards: govuk-summary-card for penalty type grouping.

Rows: govuk-summary-list for penalty details.


These styles ensure visual consistency with GOV.UK design standards.


---

8. Key Features

Scalable: Supports any number of tax years, penalty types, and penalties.

Reusable Sub-Components: Encapsulated logic for tax year headings, penalty cards, and rows.

TypeScript Integration: Ensures type safety and better developer experience.

Custom Utility: formatOrdinal enhances usability by formatting numbers.



---

9. Limitations

Assumes data validity; does not include data validation logic.

Styling strictly follows GOV.UK standards, limiting design flexibility.



---

10. Future Enhancements

Add internationalization support for different currency symbols or text.

Implement lazy loading for large datasets.

Include a "no data" state if penalty data is empty.



---

11. Conclusion

The PenaltyDetails component, along with its sub-components and helper functions, offers a robust solution for rendering detailed penalty information. The design ensures modularity, scalability, and adherence to accessibility and design standards.

