import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import AppealsAndPenaltiesLanding from './AppealsAndPenaltiesLanding';
import { useTranslation } from 'react-i18next';
import useHMRCExternalLinks from '../../../components/helpers/hooks/HMRCExternalLinks';

// Mock dependencies
jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string) => key,
  }),
}));

jest.mock('../../../components/helpers/hooks/HMRCExternalLinks', () => ({
  default: () => ({ hmrcURL: 'https://www.hmrc.gov.uk/' }),
}));

const mockFetchData = jest.fn();
const mockCreateCase = jest.fn();
const mockHandleCaseStart = jest.fn();

const defaultProps = {
  isLogout: false,
  pConn: {
    getContextName: () => 'mockContext',
    getMashupApi: () => ({
      createCase: mockCreateCase,
    }),
    getDataPageUtils: () => ({
      getDataAsync: mockFetchData,
    }),
    getConstants: () => ({
      APP: { APP: 'mockApp' },
    }),
  },
  penaltyDataEndpoint: '/mock/penalty-data-endpoint',
  creatCaseEndpoint: '/mock/create-case-endpoint',
  handleCaseStart: mockHandleCaseStart,
};

describe('AppealsAndPenaltiesLanding Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders correctly with default props', () => {
    render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    expect(screen.getByRole('main')).toBeInTheDocument();
    expect(screen.getByText('YOUR_SELF_ASSESMENT_PENALTIES')).toBeInTheDocument();
  });

  test('renders "no penalties" message when no data is fetched', async () => {
    mockFetchData.mockResolvedValueOnce({ data: [] });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
    });
  });

  test('renders penalties section when data is available', async () => {
    mockFetchData.mockResolvedValueOnce({
      data: [
        {
          penaltyData: [
            {
              duration: '2022-2023',
              penalties: [
                {
                  penaltyType: 'Late Filing',
                  results: [
                    { PenaltyNumber: 1, AdditionalInfo: 'Missed deadline', Amount: 100 },
                  ],
                  totalAmount: 100,
                },
              ],
            },
          ],
        },
      ],
    });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_CAN_MAKE_AN_APPEAL')).toBeInTheDocument();
      expect(screen.getByText('Late Filing')).toBeInTheDocument();
      expect(screen.getByText('Missed deadline')).toBeInTheDocument();
    });
  });

  test('handles createCase button click', async () => {
    render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    const startNowButton = screen.getByText('START_NOW');

    fireEvent.click(startNowButton);

    expect(mockCreateCase).toHaveBeenCalledWith(
      defaultProps.creatCaseEndpoint,
      'mockApp'
    );
    expect(mockHandleCaseStart).toHaveBeenCalled();
  });

  test('renders logout state correctly', () => {
    render(<AppealsAndPenaltiesLanding {...defaultProps} isLogout={true} />);
    expect(screen.getByRole('main')).toHaveClass('visibility-hidden');
  });

  test('renders "Page not working properly" link with correct URL', () => {
    render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    const link = screen.getByText('PAGE_NOT_WORKING_PROPERLY');
    expect(link).toHaveAttribute(
      'href',
      'https://www.hmrc.gov.uk/contact/report-technical-problem?service=427&referrerUrl=' +
        window.location
    );
  });
});

describe('Edge Cases for AppealsAndPenaltiesLanding', () => {
  test('handles API error gracefully when fetching data', async () => {
    mockFetchData.mockRejectedValueOnce(new Error('API error'));

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOUR_SELF_ASSESMENT_PENALTIES')).toBeInTheDocument();
    });

    // No penalties section should render
    expect(screen.queryByText('YOU_CAN_MAKE_AN_APPEAL')).not.toBeInTheDocument();
  });

  test('handles empty penaltyData gracefully', async () => {
    mockFetchData.mockResolvedValueOnce({ data: [] });

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
    });
  });

  test('handles penalties with missing fields gracefully', async () => {
    const incompletePenaltyData = {
      data: [
        {
          penaltyData: [
            {
              duration: '2022-2023',
              penalties: [
                {
                  penaltyType: null,
                  results: [{ PenaltyNumber: null, AdditionalInfo: null, Amount: null }],
                },
              ],
            },
          ],
        },
      ],
    };

    mockFetchData.mockResolvedValueOnce(incompletePenaltyData);

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOUR_SELF_ASSESMENT_PENALTIES')).toBeInTheDocument();
      expect(screen.queryByText('null')).not.toBeInTheDocument(); // Ensure missing data does not render as "null"
    });
  });

  test('renders correctly when penaltyData is undefined', async () => {
    mockFetchData.mockResolvedValueOnce(undefined);

    render(<AppealsAndPenaltiesLanding {...defaultProps} />);

    await waitFor(() => {
      expect(screen.getByText('YOU_DO_NOT_HAVE_SA_PENALTIES')).toBeInTheDocument();
    });
  });
});
