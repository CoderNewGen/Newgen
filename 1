import React from 'react';
import { render, screen } from '@testing-library/react';
import { PenaltyDatails } from './PenaltyDatails';
import { useTranslation } from 'react-i18next';

// Mock i18n
jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string) => key,
  }),
}));

const mockPenaltyData = [
  {
    duration: '2022-2023',
    penalties: [
      {
        penaltyType: 'Late Filing',
        results: [
          {
            PenaltyNumber: 1,
            AdditionalInfo: 'Missed deadline by 5 days',
            Amount: 100.5,
          },
          {
            PenaltyNumber: 2,
            AdditionalInfo: 'Missed deadline by 15 days',
            Amount: 200.75,
          },
        ],
        totalAmount: 301.25,
      },
    ],
  },
];

describe('PenaltyDatails Component', () => {
  test('renders no penalties message when penaltyData is empty', () => {
    render(<PenaltyDatails penaltyData={[]} />);
    expect(screen.getByText('NO_PENALTIES_AVAILABLE')).toBeInTheDocument();
  });

  test('renders duration heading for penalties', () => {
    render(<PenaltyDatails penaltyData={mockPenaltyData} />);
    expect(screen.getByText('PENALTIES_FOR_THE 2022-2023 TAX_YEAR')).toBeInTheDocument();
  });

  test('renders penalty cards with correct details', () => {
    render(<PenaltyDatails penaltyData={mockPenaltyData} />);

    // Verify penalty type
    expect(screen.getByText('Late Filing')).toBeInTheDocument();

    // Verify penalty rows
    expect(screen.getByText('1st PENALTY')).toBeInTheDocument();
    expect(screen.getByText('Missed deadline by 5 days')).toBeInTheDocument();
    expect(screen.getByText('£100.5')).toBeInTheDocument();

    expect(screen.getByText('2nd PENALTY')).toBeInTheDocument();
    expect(screen.getByText('Missed deadline by 15 days')).toBeInTheDocument();
    expect(screen.getByText('£200.75')).toBeInTheDocument();

    // Verify total amount
    expect(screen.getByText('£301.25')).toBeInTheDocument();
  });

  test('renders multiple penalties if present', () => {
    const multiplePenaltiesData = [
      {
        duration: '2022-2023',
        penalties: [
          {
            penaltyType: 'Late Filing',
            results: [
              { PenaltyNumber: 1, AdditionalInfo: 'Missed deadline by 10 days', Amount: 150 },
            ],
            totalAmount: 150,
          },
          {
            penaltyType: 'Late Payment',
            results: [
              { PenaltyNumber: 1, AdditionalInfo: 'Payment delayed by 5 days', Amount: 50 },
            ],
            totalAmount: 50,
          },
        ],
      },
    ];

    render(<PenaltyDatails penaltyData={multiplePenaltiesData} />);

    expect(screen.getByText('Late Filing')).toBeInTheDocument();
    expect(screen.getByText('Late Payment')).toBeInTheDocument();
  });
});

describe('PenaltyDatails Component - Edge Cases', () => {
  test('renders no penalties message when penaltyData is undefined', () => {
    render(<PenaltyDatails penaltyData={undefined} />);
    expect(screen.getByText('NO_PENALTIES_AVAILABLE')).toBeInTheDocument();
  });

  test('handles penaltyData with empty penalties array gracefully', () => {
    const emptyPenaltiesData = [{ duration: '2022-2023', penalties: [] }];
    render(<PenaltyDatails penaltyData={emptyPenaltiesData} />);
    expect(screen.getByText('PENALTIES_FOR_THE 2022-2023 TAX_YEAR')).toBeInTheDocument();
    expect(screen.queryByText('PENALTY')).not.toBeInTheDocument();
  });

  test('handles penaltyData with missing fields gracefully', () => {
    const incompletePenaltyData = [
      {
        duration: '2022-2023',
        penalties: [
          {
            penaltyType: 'Late Filing',
            results: [
              { PenaltyNumber: undefined, AdditionalInfo: undefined, Amount: undefined },
            ],
            totalAmount: 0,
          },
        ],
      },
    ];
    render(<PenaltyDatails penaltyData={incompletePenaltyData} />);

    // Verify placeholders or absence of broken data
    expect(screen.getByText('Late Filing')).toBeInTheDocument();
    expect(screen.getByText('£0')).toBeInTheDocument();
    expect(screen.queryByText('PENALTY')).not.toBeInTheDocument(); // No penalty ordinal rendered
  });

  test('handles penalties with 0 amount', () => {
    const zeroAmountPenaltyData = [
      {
        duration: '2022-2023',
        penalties: [
          {
            penaltyType: 'Zero Amount Penalty',
            results: [{ PenaltyNumber: 1, AdditionalInfo: 'No charge', Amount: 0 }],
            totalAmount: 0,
          },
        ],
      },
    ];
    render(<PenaltyDatails penaltyData={zeroAmountPenaltyData} />);

    expect(screen.getByText('Zero Amount Penalty')).toBeInTheDocument();
    expect(screen.getByText('1st PENALTY')).toBeInTheDocument();
    expect(screen.getByText('No charge')).toBeInTheDocument();
    expect(screen.getByText('£0')).toBeInTheDocument();
  });

  test('renders multiple durations correctly', () => {
    const multipleDurationsData = [
      {
        duration: '2022-2023',
        penalties: [
          {
            penaltyType: 'Late Filing',
            results: [{ PenaltyNumber: 1, AdditionalInfo: 'Missed deadline', Amount: 100 }],
            totalAmount: 100,
          },
        ],
      },
      {
        duration: '2021-2022',
        penalties: [
          {
            penaltyType: 'Late Payment',
            results: [{ PenaltyNumber: 1, AdditionalInfo: 'Late payment', Amount: 50 }],
            totalAmount: 50,
          },
        ],
      },
    ];
    render(<PenaltyDatails penaltyData={multipleDurationsData} />);

    expect(screen.getByText('PENALTIES_FOR_THE 2022-2023 TAX_YEAR')).toBeInTheDocument();
    expect(screen.getByText('Late Filing')).toBeInTheDocument();
    expect(screen.getByText('£100')).toBeInTheDocument();

    expect(screen.getByText('PENALTIES_FOR_THE 2021-2022 TAX_YEAR')).toBeInTheDocument();
    expect(screen.getByText('Late Payment')).toBeInTheDocument();
    expect(screen.getByText('£50')).toBeInTheDocument();
  });

  test('handles penalties with large amounts correctly', () => {
    const largeAmountPenaltyData = [
      {
        duration: '2022-2023',
        penalties: [
          {
            penaltyType: 'High Value Penalty',
            results: [{ PenaltyNumber: 1, AdditionalInfo: 'Significant delay', Amount: 1000000.5 }],
            totalAmount: 1000000.5,
          },
        ],
      },
    ];
    render(<PenaltyDatails penaltyData={largeAmountPenaltyData} />);

    expect(screen.getByText('High Value Penalty')).toBeInTheDocument();
    expect(screen.getByText('£1000000.5')).toBeInTheDocument();
  });

  test('renders penaltyData with only a single penalty section', () => {
    const singlePenaltyData = [
      {
        duration: '2022-2023',
        penalties: [
          {
            penaltyType: 'Single Penalty Type',
            results: [
              { PenaltyNumber: 1, AdditionalInfo: 'Single instance penalty', Amount: 50.5 },
            ],
            totalAmount: 50.5,
          },
        ],
      },
    ];
    render(<PenaltyDatails penaltyData={singlePenaltyData} />);

    expect(screen.getByText('Single Penalty Type')).toBeInTheDocument();
    expect(screen.getByText('1st PENALTY')).toBeInTheDocument();
    expect(screen.getByText('Single instance penalty')).toBeInTheDocument();
    expect(screen.getByText('£50.5')).toBeInTheDocument();
  });
});
