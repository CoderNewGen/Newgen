import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import AppealsAndPenalties from './AppealsAndPenalties';
import AppContext from '../../reuseables/AppContext';

jest.mock('../../components/helpers/utils', () => ({
  triggerLogout: jest.fn(),
}));

jest.mock('@pega/auth/lib/sdk-auth-manager', () => ({
  getSdkConfig: jest.fn(() =>
    Promise.resolve({
      timeoutConfig: { secondsTilLogout: 120 },
    })
  ),
}));

jest.mock('../../components/helpers/hooks/HMRCExternalLinks', () => () => ({
  hmrcURL: 'https://example.com',
}));

jest.mock('../../reuseables/PegaSetup', () => ({
  useStartMashup: jest.fn(() => ({
    showPega: false,
    setShowPega: jest.fn(),
    shutterServicePage: false,
    showResolutionPage: false,
    serviceNotAvailable: false,
    assignmentPConnect: null,
    isPegaLoading: false,
  })),
}));

const renderComponent = (contextValue: any) =>
  render(
    <AppContext.Provider value={contextValue}>
      <AppealsAndPenalties journeyName="TestJourney" />
    </AppContext.Provider>
  );

describe('AppealsAndPenalties Component', () => {
  it('renders landing page by default', async () => {
    renderComponent({ showLanguageToggle: true });

    await waitFor(() => {
      expect(screen.getByText('APPEAL_A_SELF_ASSESSMENT_PENALTY')).toBeInTheDocument();
    });

    expect(screen.getByRole('heading', { name: /appeals and penalties landing/i })).toBeInTheDocument();
  });

  it('shows service not available page when currentDisplay is "servicenotavailable"', () => {
    jest.mock('../../reuseables/PegaSetup', () => ({
      useStartMashup: jest.fn(() => ({
        serviceNotAvailable: true,
      })),
    }));

    renderComponent({ showLanguageToggle: true });

    expect(screen.getByText(/Service is not available/i)).toBeInTheDocument();
  });

  it('displays the shutter page when currentDisplay is "shutterpage"', () => {
    jest.mock('../../reuseables/PegaSetup', () => ({
      useStartMashup: jest.fn(() => ({
        shutterServicePage: true,
      })),
    }));

    renderComponent({ showLanguageToggle: true });

    expect(screen.getByText(/Service is currently unavailable/i)).toBeInTheDocument();
  });

  it('renders timeout popup when showTimeoutModal is true', () => {
    renderComponent({ showLanguageToggle: true });

    fireEvent.click(screen.getByText(/stay signed in/i));

    expect(screen.getByRole('dialog')).toBeInTheDocument();
  });

  it('shows language toggle when showLanguageToggleState is true', () => {
    renderComponent({ showLanguageToggle: true });

    expect(screen.getByText(/switch language/i)).toBeInTheDocument();
  });

  it('renders LogoutPopup when showSignoutModal is true', async () => {
    renderComponent({ showLanguageToggle: true });

    fireEvent.click(screen.getByText(/sign out/i));

    await waitFor(() => {
      expect(screen.getByText(/are you sure you want to sign out/i)).toBeInTheDocument();
    });
  });

  it('handles handleCaseStart correctly', () => {
    renderComponent({ showLanguageToggle: true });

    fireEvent.click(screen.getByText(/start your appeal/i));

    expect(screen.queryByText(/landing page/i)).not.toBeInTheDocument();
    expect(screen.getByText(/pega content/i)).toBeInTheDocument();
  });
});
