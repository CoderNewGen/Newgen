import React from 'react';
import { render, act, screen } from '@testing-library/react';
import AppealsAndPenaltiesLanding from '../AppealsAndPenaltiesLanding';
import { getServiceStatus } from '../../../components/helpers/getServiceStatus';

jest.mock('../../../components/helpers/getServiceStatus', () => ({
  getServiceStatus: jest.fn().mockResolvedValue({
    loading: false,
    isServiceHealthy: true,
    shuttered: false,
    outage: false,
    time: undefined,
    date: undefined,
    time_cy: undefined,
    date_cy: undefined
  })
}));

const mockCreateCase = jest.fn();
const mockSetPenaltyData = jest.fn();
const mockSetPenaltyContent = jest.fn();
const mockSetServiceStatus = jest.fn();

const mockGetValue = jest.fn((key) => {
  if (key === 'pxRequestor.pyUserIdentifier') return 'testUser';
  if (key === 'pyWorkPage.ApplicationType') return 'TEST';
  return null;
});

const mockGetActionsApi = jest.fn(() => ({
  createCase: mockCreateCase
}));

const mockGetConstants = jest.fn(() => ({
  APP: {
    PAGE: {
      LANDING: {
        PENALTIES: 'penalties-landing'
      }
    }
  }
}));

const mockGetPageDataAsync = jest.fn();

const mockPConnect = jest.fn(() => ({
  getRawMetadata: jest.fn(() => ({
    config: {
      type: 'View',
      name: 'TestView'
    }
  }))
}));

const defaultProps = {
  getPConnect: mockPConnect,
  createCase: mockCreateCase,
  setPenaltyData: mockSetPenaltyData,
  setPenaltyContent: mockSetPenaltyContent,
  setServiceStatus: mockSetServiceStatus
};

const responseContentObject = {
  penaltyContent: {
    title: 'Penalties and Appeals',
    startAnAppeal: 'Start an appeal'
  },
  penaltyContentCy: {
    title: 'Cosbau am gyflwyno',
    startAnAppeal: 'Dechrau apÃªl'
  }
};

describe('AppealsAndPenaltiesLanding', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    // Mock PCore methods
    (window as any).PCore = {
      getStoreValue: mockGetValue,
      getActionsApi: mockGetActionsApi,
      getConstants: mockGetConstants,
      getDataApiUtils: () => ({
        getDataAsync: mockGetPageDataAsync
      }),
      getPubSubUtils: () => ({
        subscribe: jest.fn(),
        unsubscribe: jest.fn()
      })
    };
  });

  it('renders component and sets penalty content', async () => {
    mockGetPageDataAsync.mockResolvedValue(responseContentObject);

    await act(async () => {
      render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    });

    expect(mockSetPenaltyContent).toHaveBeenCalledWith(responseContentObject);
    expect(screen.getByText('Penalties and Appeals')).toBeInTheDocument();
    expect(screen.getByText('Start an appeal')).toBeInTheDocument();
  });

  it('creates case on start button click and sets service status', async () => {
    mockGetPageDataAsync.mockResolvedValue(responseContentObject);

    await act(async () => {
      render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    });

    const button = screen.getByRole('button', { name: /Start an appeal/i });

    await act(async () => {
      button.click();
    });

    expect(getServiceStatus).toHaveBeenCalled();
    expect(mockCreateCase).toHaveBeenCalled();
  });

  it('calls setServiceStatus when service is unhealthy', async () => {
    (getServiceStatus as jest.Mock).mockResolvedValueOnce({
      loading: false,
      isServiceHealthy: false,
      shuttered: true,
      outage: false,
      time: '10:00',
      date: '2025-05-15',
      time_cy: '10:00',
      date_cy: '2025-05-15'
    });

    mockGetPageDataAsync.mockResolvedValue(responseContentObject);

    await act(async () => {
      render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    });

    const button = screen.getByRole('button', { name: /Start an appeal/i });

    await act(async () => {
      button.click();
    });

    expect(mockSetServiceStatus).toHaveBeenCalledWith(
      expect.objectContaining({ isServiceHealthy: false, shuttered: true })
    );
  });

  it('subscribes to languageToggleTriggered and updates penalty content', async () => {
    const mockSubscribe = jest.fn();
    const mockUnsubscribe = jest.fn();

    (window as any).PCore.getPubSubUtils = () => ({
      subscribe: mockSubscribe,
      unsubscribe: mockUnsubscribe
    });

    mockGetPageDataAsync.mockResolvedValue(responseContentObject);

    await act(async () => {
      render(<AppealsAndPenaltiesLanding {...defaultProps} />);
    });

    expect(mockSubscribe).toHaveBeenCalledWith(
      'languageToggleTriggered',
      expect.any(Function),
      'PenaltiesLandingPageLanguageChange'
    );

    const callback = mockSubscribe.mock.calls[0][1];

    await act(async () => {
      callback({ language: 'cy' });
    });

    expect(mockSetPenaltyContent).toHaveBeenCalledWith(responseContentObject);
  });
});
