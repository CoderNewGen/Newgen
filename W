import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import Landing from './index';
import { C11nEnv } from '@pega/react-sdk-components/lib/types';

const defaultProps = {
  isLogout: false,
  pConn: {},
  penaltyDataEndpoint: '/penalty-data',
  createCaseEndpoint: '/create-case',
  handleCaseStart: jest.fn(),
  penaltyDataEndpointParams: {},
  setServiceStatus: jest.fn(), // <- Required prop added
};

describe('Landing Component', () => {
  it('should render correctly with default props', () => {
    const { getByText } = render(<Landing {...defaultProps} />);
    expect(getByText('Appeals and Penalties')).toBeInTheDocument();
  });

  it('should trigger case start on button click', async () => {
    render(<Landing {...defaultProps} />);
    const startButton = screen.getByRole('button', { name: /Start appeal/i });
    fireEvent.click(startButton);
    await waitFor(() => {
      expect(defaultProps.handleCaseStart).toHaveBeenCalled();
    });
  });

  it('should call setServiceStatus if provided', async () => {
    const setServiceStatusMock = jest.fn();
    render(<Landing {...defaultProps} setServiceStatus={setServiceStatusMock} />);
    await waitFor(() => {
      expect(setServiceStatusMock).toHaveBeenCalled();
    });
  });

  it('should handle logout flow correctly', () => {
    const props = {
      ...defaultProps,
      isLogout: true,
    };
    render(<Landing {...props} />);
    expect(screen.getByText(/you have been logged out/i)).toBeInTheDocument();
  });

  it('should handle empty penalty data gracefully', () => {
    render(<Landing {...defaultProps} />);
    expect(screen.queryByText(/no penalties available/i)).not.toBeNull();
  });
});
