// src/hooks/useTracking.ts
import { useCallback } from 'react';

export interface TrackingEvent {
  eventId: string;
  eventType: string;
  elementType: 'button' | 'link' | 'external-link' | 'router-link';
  metadata?: Record<string, unknown>;
}

export function useTracking() {
  const trackEvent = useCallback(async (event: TrackingEvent) => {
    try {
      // Add any additional tracking data you want to include globally
      const trackingData = {
        ...event,
        timestamp: new Date().toISOString(),
        url: window.location.pathname,
        userAgent: navigator.userAgent
      };

      // Send to your analytics API
      await fetch('/api/analytics', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          // Include auth headers if needed
        },
        body: JSON.stringify(trackingData),
      });

      // Optional: Debug logging in development
      if (process.env.NODE_ENV === 'development') {
        console.log('Tracked event:', trackingData);
      }
    } catch (error) {
      console.error('Tracking error:', error);
      // Optional: Implement retry logic or fallback tracking here
    }
  }, []);

  return { trackEvent };
}
