import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import Landing from './index';
import { C11nEnv } from '@pega/react-sdk-components/lib/types';

const defaultProps = {
  isLogout: false,
  pConn: {},
  penaltyDataEndpoint: '/penalty-data',
  createCaseEndpoint: '/create-case',
  handleCaseStart: jest.fn(),
  penaltyDataEndpointParams: {},
  setServiceStatus: jest.fn(), // REQUIRED PROP INCLUDED
};

describe('Landing component tests', () => {
  it('renders without crashing', () => {
    render(<Landing {...defaultProps} />);
    expect(screen.getByText(/Appeals and Penalties/i)).toBeInTheDocument();
  });

  it('starts a new case when start button is clicked', async () => {
    render(<Landing {...defaultProps} />);
    const startButton = screen.getByRole('button', { name: /Start Appeal/i });
    fireEvent.click(startButton);
    await waitFor(() => {
      expect(defaultProps.handleCaseStart).toHaveBeenCalled();
    });
  });

  it('handles penalty data fetch and rendering', async () => {
    render(<Landing {...defaultProps} />);
    expect(await screen.findByText(/Penalty Summary/i)).toBeInTheDocument();
  });

  it('handles logout state', () => {
    const logoutProps = { ...defaultProps, isLogout: true };
    render(<Landing {...logoutProps} />);
    expect(screen.getByText(/You have been logged out/i)).toBeInTheDocument();
  });

  it('does not crash with empty penalty data', () => {
    render(<Landing {...defaultProps} />);
    expect(screen.getByTestId('penalty-summary')).toBeInTheDocument();
  });

  // NEW TEST CASE FOR setServiceStatus PROP BEHAVIOR
  it('calls setServiceStatus if provided', async () => {
    const setServiceStatusMock = jest.fn();
    render(
      <Landing
        {...defaultProps}
        setServiceStatus={setServiceStatusMock}
      />
    );
    await waitFor(() => {
      expect(setServiceStatusMock).toHaveBeenCalled();
    });
  });
});
